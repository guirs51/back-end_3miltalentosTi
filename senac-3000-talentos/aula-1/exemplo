// Função para buscar posts
function fetchPosts() {
  return fetch("https://jsonplaceholder.typicode.com/posts")
    .then((response) => response.json())
    .then((posts) => posts.slice(0, 10)); // Limita para os 10 primeiros posts
}

// Função para buscar usuário por ID
function fetchUser(userId) {
  return fetch(`https://jsonplaceholder.typicode.com/users/${userId}`).then(
    (response) => response.json()
  );
}

// Função principal que busca posts e usuários
async function fetchPostsAndUsers() {
  try {
    const posts = await fetchPosts();

    for (const post of posts) {
      const user = await fetchUser(post.userId);
      console.log(`Post: "${post.title}"`);
      console.log(`Usuário: "${user.name}"`);
      console.log(`Email: "${user.email}"`);
      console.log("------------------------------------------------");
    }
  } catch (error) {
    console.error("Erro ao buscar dados:", error);
  }
}

// Executa a função
fetchPostsAndUsers();

// server.js
const http = require("http");

// Função para buscar dados da API externa
async function fetchData(url) {
  try {
    const response = await fetch(url);
    return response.json();
  } catch (error) {
    console.error("Erro ao buscar dados:", error);
    return { error: "Falha ao obter dados" };
  }
}

// Criação do servidor
const server = http.createServer(async (req, res) => {
  res.setHeader("Content-Type", "application/json");

  if (req.url === "/tarefas" && req.method === "GET") {
    const todosData = await fetchData(
      "https://jsonplaceholder.typicode.com/todos"
    );
    res.writeHead(200);
    res.end(JSON.stringify(todosData));
  } else if (req.url === "/usuarios" && req.method === "GET") {
    const usersData = await fetchData(
      "https://jsonplaceholder.typicode.com/users"
    );
    res.writeHead(200);
    res.end(JSON.stringify(usersData));
  } else {
    res.writeHead(404);
    res.end(JSON.stringify({ message: "Rota não encontrada" }));
  }
});

// Inicialização do servidor
const PORT = 3000;
server.listen(PORT, () => {
  console.log(`Servidor rodando em http://localhost:${PORT}`);
});
